# Makefile.in generated by automake 1.11 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/smc
pkgincludedir = $(includedir)/smc
pkglibdir = $(libdir)/smc
pkglibexecdir = $(libexecdir)/smc
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
target_triplet = x86_64-unknown-linux-gnu
bin_PROGRAMS = smc$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_smc_OBJECTS = audio.$(OBJEXT) random_sound.$(OBJEXT) \
	sound_manager.$(OBJEXT) camera.$(OBJEXT) collision.$(OBJEXT) \
	editor.$(OBJEXT) filesystem.$(OBJEXT) \
	resource_manager.$(OBJEXT) file_parser.$(OBJEXT) \
	framerate.$(OBJEXT) game_core.$(OBJEXT) i18n.$(OBJEXT) \
	main.$(OBJEXT) vector.$(OBJEXT) utilities.$(OBJEXT) \
	sprite_manager.$(OBJEXT) turtle_boss.$(OBJEXT) eato.$(OBJEXT) \
	enemy.$(OBJEXT) gee.$(OBJEXT) furball.$(OBJEXT) \
	flyon.$(OBJEXT) krush.$(OBJEXT) rokko.$(OBJEXT) \
	spika.$(OBJEXT) spikeball.$(OBJEXT) static.$(OBJEXT) \
	thromp.$(OBJEXT) turtle.$(OBJEXT) hud.$(OBJEXT) menu.$(OBJEXT) \
	menu_data.$(OBJEXT) joystick.$(OBJEXT) keyboard.$(OBJEXT) \
	mouse.$(OBJEXT) global_effect.$(OBJEXT) \
	level_background.$(OBJEXT) level.$(OBJEXT) \
	level_editor.$(OBJEXT) level_manager.$(OBJEXT) \
	level_settings.$(OBJEXT) animated_sprite.$(OBJEXT) \
	ball.$(OBJEXT) bonusbox.$(OBJEXT) box.$(OBJEXT) \
	enemystopper.$(OBJEXT) goldpiece.$(OBJEXT) \
	level_entry.$(OBJEXT) level_exit.$(OBJEXT) \
	moving_platform.$(OBJEXT) movingsprite.$(OBJEXT) \
	path.$(OBJEXT) powerup.$(OBJEXT) spinbox.$(OBJEXT) \
	sprite.$(OBJEXT) star.$(OBJEXT) text_box.$(OBJEXT) \
	world_layer.$(OBJEXT) overworld.$(OBJEXT) \
	world_player.$(OBJEXT) world_waypoint.$(OBJEXT) \
	world_editor.$(OBJEXT) world_manager.$(OBJEXT) \
	world_sprite_manager.$(OBJEXT) player.$(OBJEXT) \
	preferences.$(OBJEXT) savegame.$(OBJEXT) animation.$(OBJEXT) \
	font.$(OBJEXT) gl_surface.$(OBJEXT) img_manager.$(OBJEXT) \
	img_settings.$(OBJEXT) renderer.$(OBJEXT) video.$(OBJEXT)
smc_OBJECTS = $(am_smc_OBJECTS)
smc_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(smc_SOURCES)
DIST_SOURCES = $(smc_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/ren/Desktop/eta-1.9/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/ren/Desktop/eta-1.9/missing --run tar
AUTOCONF = ${SHELL} /home/ren/Desktop/eta-1.9/missing --run autoconf
AUTOHEADER = ${SHELL} /home/ren/Desktop/eta-1.9/missing --run autoheader
AUTOMAKE = ${SHELL} /home/ren/Desktop/eta-1.9/missing --run automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CEGUI_CFLAGS = -I/usr/include/CEGUI  
CEGUI_LIBS = -lCEGUIBase -lCEGUIOpenGLRenderer  
CFLAGS = -g -O2
CPPFLAGS =  -D_GNU_SOURCE=1 -D_REENTRANT -I/usr/include/SDL   -I/usr/include/CEGUI  
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GETTEXT_MACRO_VERSION = 0.17
GMSGFMT = /usr/bin/msgfmt
GMSGFMT_015 = /usr/bin/msgfmt
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INTLLIBS = 
INTL_MACOSX_LIBS = 
LDFLAGS = 
LIBICONV = -liconv
LIBINTL = 
LIBOBJS = 
LIBS = -lSDL_ttf -lSDL_mixer -lSDL_image -lpng -lGLU -lGL -lboost_filesystem  -lSDL   -lCEGUIBase -lCEGUIOpenGLRenderer  
LTLIBICONV = -liconv
LTLIBINTL = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/ren/Desktop/eta-1.9/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
MSGFMT = /usr/bin/msgfmt
MSGFMT_015 = /usr/bin/msgfmt
MSGMERGE = /usr/bin/msgmerge
OBJEXT = o
PACKAGE = smc
PACKAGE_BUGREPORT = 
PACKAGE_NAME = smc
PACKAGE_STRING = smc 1.9
PACKAGE_TARNAME = smc
PACKAGE_VERSION = 1.9
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
POSUB = po
SDL_CFLAGS = -D_GNU_SOURCE=1 -D_REENTRANT -I/usr/include/SDL  
SDL_LIBS = -lSDL  
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
USE_NLS = yes
VERSION = 1.9
XGETTEXT = /usr/bin/xgettext
XGETTEXT_015 = /usr/bin/xgettext
XGETTEXT_EXTRA_OPTIONS = 
abs_builddir = /home/ren/Desktop/eta-1.9/src
abs_srcdir = /home/ren/Desktop/eta-1.9/src
abs_top_builddir = /home/ren/Desktop/eta-1.9
abs_top_srcdir = /home/ren/Desktop/eta-1.9
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/ren/Desktop/eta-1.9/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = x86_64-unknown-linux-gnu
target_alias = 
target_cpu = x86_64
target_os = linux-gnu
target_vendor = unknown
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
AM_CXXFLAGS = -Wall -Wpointer-arith
AM_CPPFLAGS = -DDATA_DIR="\"$(pkgdatadir)\""
smc_SOURCES = \
	audio/audio.cpp \
	audio/random_sound.cpp \
	audio/sound_manager.cpp \
	core/camera.cpp \
	core/collision.cpp \
	core/editor.cpp \
	core/filesystem/filesystem.cpp \
	core/filesystem/resource_manager.cpp \
	core/file_parser.cpp \
	core/framerate.cpp \
	core/game_core.cpp \
	core/i18n.cpp \
	core/main.cpp \
	core/math/vector.cpp \
	core/math/utilities.cpp \
	core/sprite_manager.cpp \
	enemies/bosses/turtle_boss.cpp \
	enemies/eato.cpp \
	enemies/enemy.cpp \
	enemies/gee.cpp \
	enemies/furball.cpp \
	enemies/flyon.cpp \
	enemies/krush.cpp \
	enemies/rokko.cpp \
	enemies/spika.cpp \
	enemies/spikeball.cpp \
	enemies/static.cpp \
	enemies/thromp.cpp \
	enemies/turtle.cpp \
	gui/hud.cpp \
	gui/menu.cpp \
	gui/menu_data.cpp \
	input/joystick.cpp \
	input/keyboard.cpp \
	input/mouse.cpp \
	level/global_effect.cpp \
	level/level_background.cpp \
	level/level.cpp \
	level/level_editor.cpp \
	level/level_manager.cpp \
	level/level_settings.cpp \
	objects/animated_sprite.cpp \
	objects/ball.cpp \
	objects/bonusbox.cpp \
	objects/box.cpp \
	objects/enemystopper.cpp \
	objects/goldpiece.cpp \
	objects/level_entry.cpp \
	objects/level_exit.cpp \
	objects/moving_platform.cpp \
	objects/movingsprite.cpp \
	objects/path.cpp \
	objects/powerup.cpp \
	objects/spinbox.cpp \
	objects/sprite.cpp \
	objects/star.cpp \
	objects/text_box.cpp \
	overworld/world_layer.cpp \
	overworld/overworld.cpp \
	overworld/world_player.cpp \
	overworld/world_waypoint.cpp \
	overworld/world_editor.cpp \
	overworld/world_manager.cpp \
	overworld/world_sprite_manager.cpp \
	player/player.cpp \
	user/preferences.cpp \
	user/savegame.cpp \
	video/animation.cpp \
	video/font.cpp \
	video/gl_surface.cpp \
	video/img_manager.cpp \
	video/img_settings.cpp \
	video/renderer.cpp \
	video/video.cpp

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
smc$(EXEEXT): $(smc_OBJECTS) $(smc_DEPENDENCIES) 
	@rm -f smc$(EXEEXT)
	$(CXXLINK) $(smc_OBJECTS) $(smc_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/animated_sprite.Po
include ./$(DEPDIR)/animation.Po
include ./$(DEPDIR)/audio.Po
include ./$(DEPDIR)/ball.Po
include ./$(DEPDIR)/bonusbox.Po
include ./$(DEPDIR)/box.Po
include ./$(DEPDIR)/camera.Po
include ./$(DEPDIR)/collision.Po
include ./$(DEPDIR)/eato.Po
include ./$(DEPDIR)/editor.Po
include ./$(DEPDIR)/enemy.Po
include ./$(DEPDIR)/enemystopper.Po
include ./$(DEPDIR)/file_parser.Po
include ./$(DEPDIR)/filesystem.Po
include ./$(DEPDIR)/flyon.Po
include ./$(DEPDIR)/font.Po
include ./$(DEPDIR)/framerate.Po
include ./$(DEPDIR)/furball.Po
include ./$(DEPDIR)/game_core.Po
include ./$(DEPDIR)/gee.Po
include ./$(DEPDIR)/gl_surface.Po
include ./$(DEPDIR)/global_effect.Po
include ./$(DEPDIR)/goldpiece.Po
include ./$(DEPDIR)/hud.Po
include ./$(DEPDIR)/i18n.Po
include ./$(DEPDIR)/img_manager.Po
include ./$(DEPDIR)/img_settings.Po
include ./$(DEPDIR)/joystick.Po
include ./$(DEPDIR)/keyboard.Po
include ./$(DEPDIR)/krush.Po
include ./$(DEPDIR)/level.Po
include ./$(DEPDIR)/level_background.Po
include ./$(DEPDIR)/level_editor.Po
include ./$(DEPDIR)/level_entry.Po
include ./$(DEPDIR)/level_exit.Po
include ./$(DEPDIR)/level_manager.Po
include ./$(DEPDIR)/level_settings.Po
include ./$(DEPDIR)/main.Po
include ./$(DEPDIR)/menu.Po
include ./$(DEPDIR)/menu_data.Po
include ./$(DEPDIR)/mouse.Po
include ./$(DEPDIR)/moving_platform.Po
include ./$(DEPDIR)/movingsprite.Po
include ./$(DEPDIR)/overworld.Po
include ./$(DEPDIR)/path.Po
include ./$(DEPDIR)/player.Po
include ./$(DEPDIR)/powerup.Po
include ./$(DEPDIR)/preferences.Po
include ./$(DEPDIR)/random_sound.Po
include ./$(DEPDIR)/renderer.Po
include ./$(DEPDIR)/resource_manager.Po
include ./$(DEPDIR)/rokko.Po
include ./$(DEPDIR)/savegame.Po
include ./$(DEPDIR)/sound_manager.Po
include ./$(DEPDIR)/spika.Po
include ./$(DEPDIR)/spikeball.Po
include ./$(DEPDIR)/spinbox.Po
include ./$(DEPDIR)/sprite.Po
include ./$(DEPDIR)/sprite_manager.Po
include ./$(DEPDIR)/star.Po
include ./$(DEPDIR)/static.Po
include ./$(DEPDIR)/text_box.Po
include ./$(DEPDIR)/thromp.Po
include ./$(DEPDIR)/turtle.Po
include ./$(DEPDIR)/turtle_boss.Po
include ./$(DEPDIR)/utilities.Po
include ./$(DEPDIR)/vector.Po
include ./$(DEPDIR)/video.Po
include ./$(DEPDIR)/world_editor.Po
include ./$(DEPDIR)/world_layer.Po
include ./$(DEPDIR)/world_manager.Po
include ./$(DEPDIR)/world_player.Po
include ./$(DEPDIR)/world_sprite_manager.Po
include ./$(DEPDIR)/world_waypoint.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

audio.o: audio/audio.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT audio.o -MD -MP -MF $(DEPDIR)/audio.Tpo -c -o audio.o `test -f 'audio/audio.cpp' || echo '$(srcdir)/'`audio/audio.cpp
	$(am__mv) $(DEPDIR)/audio.Tpo $(DEPDIR)/audio.Po
#	source='audio/audio.cpp' object='audio.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o audio.o `test -f 'audio/audio.cpp' || echo '$(srcdir)/'`audio/audio.cpp

audio.obj: audio/audio.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT audio.obj -MD -MP -MF $(DEPDIR)/audio.Tpo -c -o audio.obj `if test -f 'audio/audio.cpp'; then $(CYGPATH_W) 'audio/audio.cpp'; else $(CYGPATH_W) '$(srcdir)/audio/audio.cpp'; fi`
	$(am__mv) $(DEPDIR)/audio.Tpo $(DEPDIR)/audio.Po
#	source='audio/audio.cpp' object='audio.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o audio.obj `if test -f 'audio/audio.cpp'; then $(CYGPATH_W) 'audio/audio.cpp'; else $(CYGPATH_W) '$(srcdir)/audio/audio.cpp'; fi`

random_sound.o: audio/random_sound.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT random_sound.o -MD -MP -MF $(DEPDIR)/random_sound.Tpo -c -o random_sound.o `test -f 'audio/random_sound.cpp' || echo '$(srcdir)/'`audio/random_sound.cpp
	$(am__mv) $(DEPDIR)/random_sound.Tpo $(DEPDIR)/random_sound.Po
#	source='audio/random_sound.cpp' object='random_sound.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o random_sound.o `test -f 'audio/random_sound.cpp' || echo '$(srcdir)/'`audio/random_sound.cpp

random_sound.obj: audio/random_sound.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT random_sound.obj -MD -MP -MF $(DEPDIR)/random_sound.Tpo -c -o random_sound.obj `if test -f 'audio/random_sound.cpp'; then $(CYGPATH_W) 'audio/random_sound.cpp'; else $(CYGPATH_W) '$(srcdir)/audio/random_sound.cpp'; fi`
	$(am__mv) $(DEPDIR)/random_sound.Tpo $(DEPDIR)/random_sound.Po
#	source='audio/random_sound.cpp' object='random_sound.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o random_sound.obj `if test -f 'audio/random_sound.cpp'; then $(CYGPATH_W) 'audio/random_sound.cpp'; else $(CYGPATH_W) '$(srcdir)/audio/random_sound.cpp'; fi`

sound_manager.o: audio/sound_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sound_manager.o -MD -MP -MF $(DEPDIR)/sound_manager.Tpo -c -o sound_manager.o `test -f 'audio/sound_manager.cpp' || echo '$(srcdir)/'`audio/sound_manager.cpp
	$(am__mv) $(DEPDIR)/sound_manager.Tpo $(DEPDIR)/sound_manager.Po
#	source='audio/sound_manager.cpp' object='sound_manager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sound_manager.o `test -f 'audio/sound_manager.cpp' || echo '$(srcdir)/'`audio/sound_manager.cpp

sound_manager.obj: audio/sound_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sound_manager.obj -MD -MP -MF $(DEPDIR)/sound_manager.Tpo -c -o sound_manager.obj `if test -f 'audio/sound_manager.cpp'; then $(CYGPATH_W) 'audio/sound_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/audio/sound_manager.cpp'; fi`
	$(am__mv) $(DEPDIR)/sound_manager.Tpo $(DEPDIR)/sound_manager.Po
#	source='audio/sound_manager.cpp' object='sound_manager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sound_manager.obj `if test -f 'audio/sound_manager.cpp'; then $(CYGPATH_W) 'audio/sound_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/audio/sound_manager.cpp'; fi`

camera.o: core/camera.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT camera.o -MD -MP -MF $(DEPDIR)/camera.Tpo -c -o camera.o `test -f 'core/camera.cpp' || echo '$(srcdir)/'`core/camera.cpp
	$(am__mv) $(DEPDIR)/camera.Tpo $(DEPDIR)/camera.Po
#	source='core/camera.cpp' object='camera.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o camera.o `test -f 'core/camera.cpp' || echo '$(srcdir)/'`core/camera.cpp

camera.obj: core/camera.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT camera.obj -MD -MP -MF $(DEPDIR)/camera.Tpo -c -o camera.obj `if test -f 'core/camera.cpp'; then $(CYGPATH_W) 'core/camera.cpp'; else $(CYGPATH_W) '$(srcdir)/core/camera.cpp'; fi`
	$(am__mv) $(DEPDIR)/camera.Tpo $(DEPDIR)/camera.Po
#	source='core/camera.cpp' object='camera.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o camera.obj `if test -f 'core/camera.cpp'; then $(CYGPATH_W) 'core/camera.cpp'; else $(CYGPATH_W) '$(srcdir)/core/camera.cpp'; fi`

collision.o: core/collision.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT collision.o -MD -MP -MF $(DEPDIR)/collision.Tpo -c -o collision.o `test -f 'core/collision.cpp' || echo '$(srcdir)/'`core/collision.cpp
	$(am__mv) $(DEPDIR)/collision.Tpo $(DEPDIR)/collision.Po
#	source='core/collision.cpp' object='collision.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o collision.o `test -f 'core/collision.cpp' || echo '$(srcdir)/'`core/collision.cpp

collision.obj: core/collision.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT collision.obj -MD -MP -MF $(DEPDIR)/collision.Tpo -c -o collision.obj `if test -f 'core/collision.cpp'; then $(CYGPATH_W) 'core/collision.cpp'; else $(CYGPATH_W) '$(srcdir)/core/collision.cpp'; fi`
	$(am__mv) $(DEPDIR)/collision.Tpo $(DEPDIR)/collision.Po
#	source='core/collision.cpp' object='collision.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o collision.obj `if test -f 'core/collision.cpp'; then $(CYGPATH_W) 'core/collision.cpp'; else $(CYGPATH_W) '$(srcdir)/core/collision.cpp'; fi`

editor.o: core/editor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT editor.o -MD -MP -MF $(DEPDIR)/editor.Tpo -c -o editor.o `test -f 'core/editor.cpp' || echo '$(srcdir)/'`core/editor.cpp
	$(am__mv) $(DEPDIR)/editor.Tpo $(DEPDIR)/editor.Po
#	source='core/editor.cpp' object='editor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o editor.o `test -f 'core/editor.cpp' || echo '$(srcdir)/'`core/editor.cpp

editor.obj: core/editor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT editor.obj -MD -MP -MF $(DEPDIR)/editor.Tpo -c -o editor.obj `if test -f 'core/editor.cpp'; then $(CYGPATH_W) 'core/editor.cpp'; else $(CYGPATH_W) '$(srcdir)/core/editor.cpp'; fi`
	$(am__mv) $(DEPDIR)/editor.Tpo $(DEPDIR)/editor.Po
#	source='core/editor.cpp' object='editor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o editor.obj `if test -f 'core/editor.cpp'; then $(CYGPATH_W) 'core/editor.cpp'; else $(CYGPATH_W) '$(srcdir)/core/editor.cpp'; fi`

filesystem.o: core/filesystem/filesystem.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT filesystem.o -MD -MP -MF $(DEPDIR)/filesystem.Tpo -c -o filesystem.o `test -f 'core/filesystem/filesystem.cpp' || echo '$(srcdir)/'`core/filesystem/filesystem.cpp
	$(am__mv) $(DEPDIR)/filesystem.Tpo $(DEPDIR)/filesystem.Po
#	source='core/filesystem/filesystem.cpp' object='filesystem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o filesystem.o `test -f 'core/filesystem/filesystem.cpp' || echo '$(srcdir)/'`core/filesystem/filesystem.cpp

filesystem.obj: core/filesystem/filesystem.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT filesystem.obj -MD -MP -MF $(DEPDIR)/filesystem.Tpo -c -o filesystem.obj `if test -f 'core/filesystem/filesystem.cpp'; then $(CYGPATH_W) 'core/filesystem/filesystem.cpp'; else $(CYGPATH_W) '$(srcdir)/core/filesystem/filesystem.cpp'; fi`
	$(am__mv) $(DEPDIR)/filesystem.Tpo $(DEPDIR)/filesystem.Po
#	source='core/filesystem/filesystem.cpp' object='filesystem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o filesystem.obj `if test -f 'core/filesystem/filesystem.cpp'; then $(CYGPATH_W) 'core/filesystem/filesystem.cpp'; else $(CYGPATH_W) '$(srcdir)/core/filesystem/filesystem.cpp'; fi`

resource_manager.o: core/filesystem/resource_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT resource_manager.o -MD -MP -MF $(DEPDIR)/resource_manager.Tpo -c -o resource_manager.o `test -f 'core/filesystem/resource_manager.cpp' || echo '$(srcdir)/'`core/filesystem/resource_manager.cpp
	$(am__mv) $(DEPDIR)/resource_manager.Tpo $(DEPDIR)/resource_manager.Po
#	source='core/filesystem/resource_manager.cpp' object='resource_manager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o resource_manager.o `test -f 'core/filesystem/resource_manager.cpp' || echo '$(srcdir)/'`core/filesystem/resource_manager.cpp

resource_manager.obj: core/filesystem/resource_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT resource_manager.obj -MD -MP -MF $(DEPDIR)/resource_manager.Tpo -c -o resource_manager.obj `if test -f 'core/filesystem/resource_manager.cpp'; then $(CYGPATH_W) 'core/filesystem/resource_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/core/filesystem/resource_manager.cpp'; fi`
	$(am__mv) $(DEPDIR)/resource_manager.Tpo $(DEPDIR)/resource_manager.Po
#	source='core/filesystem/resource_manager.cpp' object='resource_manager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o resource_manager.obj `if test -f 'core/filesystem/resource_manager.cpp'; then $(CYGPATH_W) 'core/filesystem/resource_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/core/filesystem/resource_manager.cpp'; fi`

file_parser.o: core/file_parser.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT file_parser.o -MD -MP -MF $(DEPDIR)/file_parser.Tpo -c -o file_parser.o `test -f 'core/file_parser.cpp' || echo '$(srcdir)/'`core/file_parser.cpp
	$(am__mv) $(DEPDIR)/file_parser.Tpo $(DEPDIR)/file_parser.Po
#	source='core/file_parser.cpp' object='file_parser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o file_parser.o `test -f 'core/file_parser.cpp' || echo '$(srcdir)/'`core/file_parser.cpp

file_parser.obj: core/file_parser.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT file_parser.obj -MD -MP -MF $(DEPDIR)/file_parser.Tpo -c -o file_parser.obj `if test -f 'core/file_parser.cpp'; then $(CYGPATH_W) 'core/file_parser.cpp'; else $(CYGPATH_W) '$(srcdir)/core/file_parser.cpp'; fi`
	$(am__mv) $(DEPDIR)/file_parser.Tpo $(DEPDIR)/file_parser.Po
#	source='core/file_parser.cpp' object='file_parser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o file_parser.obj `if test -f 'core/file_parser.cpp'; then $(CYGPATH_W) 'core/file_parser.cpp'; else $(CYGPATH_W) '$(srcdir)/core/file_parser.cpp'; fi`

framerate.o: core/framerate.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT framerate.o -MD -MP -MF $(DEPDIR)/framerate.Tpo -c -o framerate.o `test -f 'core/framerate.cpp' || echo '$(srcdir)/'`core/framerate.cpp
	$(am__mv) $(DEPDIR)/framerate.Tpo $(DEPDIR)/framerate.Po
#	source='core/framerate.cpp' object='framerate.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o framerate.o `test -f 'core/framerate.cpp' || echo '$(srcdir)/'`core/framerate.cpp

framerate.obj: core/framerate.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT framerate.obj -MD -MP -MF $(DEPDIR)/framerate.Tpo -c -o framerate.obj `if test -f 'core/framerate.cpp'; then $(CYGPATH_W) 'core/framerate.cpp'; else $(CYGPATH_W) '$(srcdir)/core/framerate.cpp'; fi`
	$(am__mv) $(DEPDIR)/framerate.Tpo $(DEPDIR)/framerate.Po
#	source='core/framerate.cpp' object='framerate.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o framerate.obj `if test -f 'core/framerate.cpp'; then $(CYGPATH_W) 'core/framerate.cpp'; else $(CYGPATH_W) '$(srcdir)/core/framerate.cpp'; fi`

game_core.o: core/game_core.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT game_core.o -MD -MP -MF $(DEPDIR)/game_core.Tpo -c -o game_core.o `test -f 'core/game_core.cpp' || echo '$(srcdir)/'`core/game_core.cpp
	$(am__mv) $(DEPDIR)/game_core.Tpo $(DEPDIR)/game_core.Po
#	source='core/game_core.cpp' object='game_core.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o game_core.o `test -f 'core/game_core.cpp' || echo '$(srcdir)/'`core/game_core.cpp

game_core.obj: core/game_core.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT game_core.obj -MD -MP -MF $(DEPDIR)/game_core.Tpo -c -o game_core.obj `if test -f 'core/game_core.cpp'; then $(CYGPATH_W) 'core/game_core.cpp'; else $(CYGPATH_W) '$(srcdir)/core/game_core.cpp'; fi`
	$(am__mv) $(DEPDIR)/game_core.Tpo $(DEPDIR)/game_core.Po
#	source='core/game_core.cpp' object='game_core.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o game_core.obj `if test -f 'core/game_core.cpp'; then $(CYGPATH_W) 'core/game_core.cpp'; else $(CYGPATH_W) '$(srcdir)/core/game_core.cpp'; fi`

i18n.o: core/i18n.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT i18n.o -MD -MP -MF $(DEPDIR)/i18n.Tpo -c -o i18n.o `test -f 'core/i18n.cpp' || echo '$(srcdir)/'`core/i18n.cpp
	$(am__mv) $(DEPDIR)/i18n.Tpo $(DEPDIR)/i18n.Po
#	source='core/i18n.cpp' object='i18n.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o i18n.o `test -f 'core/i18n.cpp' || echo '$(srcdir)/'`core/i18n.cpp

i18n.obj: core/i18n.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT i18n.obj -MD -MP -MF $(DEPDIR)/i18n.Tpo -c -o i18n.obj `if test -f 'core/i18n.cpp'; then $(CYGPATH_W) 'core/i18n.cpp'; else $(CYGPATH_W) '$(srcdir)/core/i18n.cpp'; fi`
	$(am__mv) $(DEPDIR)/i18n.Tpo $(DEPDIR)/i18n.Po
#	source='core/i18n.cpp' object='i18n.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o i18n.obj `if test -f 'core/i18n.cpp'; then $(CYGPATH_W) 'core/i18n.cpp'; else $(CYGPATH_W) '$(srcdir)/core/i18n.cpp'; fi`

main.o: core/main.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT main.o -MD -MP -MF $(DEPDIR)/main.Tpo -c -o main.o `test -f 'core/main.cpp' || echo '$(srcdir)/'`core/main.cpp
	$(am__mv) $(DEPDIR)/main.Tpo $(DEPDIR)/main.Po
#	source='core/main.cpp' object='main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o main.o `test -f 'core/main.cpp' || echo '$(srcdir)/'`core/main.cpp

main.obj: core/main.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT main.obj -MD -MP -MF $(DEPDIR)/main.Tpo -c -o main.obj `if test -f 'core/main.cpp'; then $(CYGPATH_W) 'core/main.cpp'; else $(CYGPATH_W) '$(srcdir)/core/main.cpp'; fi`
	$(am__mv) $(DEPDIR)/main.Tpo $(DEPDIR)/main.Po
#	source='core/main.cpp' object='main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o main.obj `if test -f 'core/main.cpp'; then $(CYGPATH_W) 'core/main.cpp'; else $(CYGPATH_W) '$(srcdir)/core/main.cpp'; fi`

vector.o: core/math/vector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT vector.o -MD -MP -MF $(DEPDIR)/vector.Tpo -c -o vector.o `test -f 'core/math/vector.cpp' || echo '$(srcdir)/'`core/math/vector.cpp
	$(am__mv) $(DEPDIR)/vector.Tpo $(DEPDIR)/vector.Po
#	source='core/math/vector.cpp' object='vector.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o vector.o `test -f 'core/math/vector.cpp' || echo '$(srcdir)/'`core/math/vector.cpp

vector.obj: core/math/vector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT vector.obj -MD -MP -MF $(DEPDIR)/vector.Tpo -c -o vector.obj `if test -f 'core/math/vector.cpp'; then $(CYGPATH_W) 'core/math/vector.cpp'; else $(CYGPATH_W) '$(srcdir)/core/math/vector.cpp'; fi`
	$(am__mv) $(DEPDIR)/vector.Tpo $(DEPDIR)/vector.Po
#	source='core/math/vector.cpp' object='vector.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o vector.obj `if test -f 'core/math/vector.cpp'; then $(CYGPATH_W) 'core/math/vector.cpp'; else $(CYGPATH_W) '$(srcdir)/core/math/vector.cpp'; fi`

utilities.o: core/math/utilities.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT utilities.o -MD -MP -MF $(DEPDIR)/utilities.Tpo -c -o utilities.o `test -f 'core/math/utilities.cpp' || echo '$(srcdir)/'`core/math/utilities.cpp
	$(am__mv) $(DEPDIR)/utilities.Tpo $(DEPDIR)/utilities.Po
#	source='core/math/utilities.cpp' object='utilities.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o utilities.o `test -f 'core/math/utilities.cpp' || echo '$(srcdir)/'`core/math/utilities.cpp

utilities.obj: core/math/utilities.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT utilities.obj -MD -MP -MF $(DEPDIR)/utilities.Tpo -c -o utilities.obj `if test -f 'core/math/utilities.cpp'; then $(CYGPATH_W) 'core/math/utilities.cpp'; else $(CYGPATH_W) '$(srcdir)/core/math/utilities.cpp'; fi`
	$(am__mv) $(DEPDIR)/utilities.Tpo $(DEPDIR)/utilities.Po
#	source='core/math/utilities.cpp' object='utilities.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o utilities.obj `if test -f 'core/math/utilities.cpp'; then $(CYGPATH_W) 'core/math/utilities.cpp'; else $(CYGPATH_W) '$(srcdir)/core/math/utilities.cpp'; fi`

sprite_manager.o: core/sprite_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sprite_manager.o -MD -MP -MF $(DEPDIR)/sprite_manager.Tpo -c -o sprite_manager.o `test -f 'core/sprite_manager.cpp' || echo '$(srcdir)/'`core/sprite_manager.cpp
	$(am__mv) $(DEPDIR)/sprite_manager.Tpo $(DEPDIR)/sprite_manager.Po
#	source='core/sprite_manager.cpp' object='sprite_manager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sprite_manager.o `test -f 'core/sprite_manager.cpp' || echo '$(srcdir)/'`core/sprite_manager.cpp

sprite_manager.obj: core/sprite_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sprite_manager.obj -MD -MP -MF $(DEPDIR)/sprite_manager.Tpo -c -o sprite_manager.obj `if test -f 'core/sprite_manager.cpp'; then $(CYGPATH_W) 'core/sprite_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/core/sprite_manager.cpp'; fi`
	$(am__mv) $(DEPDIR)/sprite_manager.Tpo $(DEPDIR)/sprite_manager.Po
#	source='core/sprite_manager.cpp' object='sprite_manager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sprite_manager.obj `if test -f 'core/sprite_manager.cpp'; then $(CYGPATH_W) 'core/sprite_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/core/sprite_manager.cpp'; fi`

turtle_boss.o: enemies/bosses/turtle_boss.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT turtle_boss.o -MD -MP -MF $(DEPDIR)/turtle_boss.Tpo -c -o turtle_boss.o `test -f 'enemies/bosses/turtle_boss.cpp' || echo '$(srcdir)/'`enemies/bosses/turtle_boss.cpp
	$(am__mv) $(DEPDIR)/turtle_boss.Tpo $(DEPDIR)/turtle_boss.Po
#	source='enemies/bosses/turtle_boss.cpp' object='turtle_boss.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o turtle_boss.o `test -f 'enemies/bosses/turtle_boss.cpp' || echo '$(srcdir)/'`enemies/bosses/turtle_boss.cpp

turtle_boss.obj: enemies/bosses/turtle_boss.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT turtle_boss.obj -MD -MP -MF $(DEPDIR)/turtle_boss.Tpo -c -o turtle_boss.obj `if test -f 'enemies/bosses/turtle_boss.cpp'; then $(CYGPATH_W) 'enemies/bosses/turtle_boss.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/bosses/turtle_boss.cpp'; fi`
	$(am__mv) $(DEPDIR)/turtle_boss.Tpo $(DEPDIR)/turtle_boss.Po
#	source='enemies/bosses/turtle_boss.cpp' object='turtle_boss.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o turtle_boss.obj `if test -f 'enemies/bosses/turtle_boss.cpp'; then $(CYGPATH_W) 'enemies/bosses/turtle_boss.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/bosses/turtle_boss.cpp'; fi`

eato.o: enemies/eato.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eato.o -MD -MP -MF $(DEPDIR)/eato.Tpo -c -o eato.o `test -f 'enemies/eato.cpp' || echo '$(srcdir)/'`enemies/eato.cpp
	$(am__mv) $(DEPDIR)/eato.Tpo $(DEPDIR)/eato.Po
#	source='enemies/eato.cpp' object='eato.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eato.o `test -f 'enemies/eato.cpp' || echo '$(srcdir)/'`enemies/eato.cpp

eato.obj: enemies/eato.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eato.obj -MD -MP -MF $(DEPDIR)/eato.Tpo -c -o eato.obj `if test -f 'enemies/eato.cpp'; then $(CYGPATH_W) 'enemies/eato.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/eato.cpp'; fi`
	$(am__mv) $(DEPDIR)/eato.Tpo $(DEPDIR)/eato.Po
#	source='enemies/eato.cpp' object='eato.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eato.obj `if test -f 'enemies/eato.cpp'; then $(CYGPATH_W) 'enemies/eato.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/eato.cpp'; fi`

enemy.o: enemies/enemy.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT enemy.o -MD -MP -MF $(DEPDIR)/enemy.Tpo -c -o enemy.o `test -f 'enemies/enemy.cpp' || echo '$(srcdir)/'`enemies/enemy.cpp
	$(am__mv) $(DEPDIR)/enemy.Tpo $(DEPDIR)/enemy.Po
#	source='enemies/enemy.cpp' object='enemy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o enemy.o `test -f 'enemies/enemy.cpp' || echo '$(srcdir)/'`enemies/enemy.cpp

enemy.obj: enemies/enemy.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT enemy.obj -MD -MP -MF $(DEPDIR)/enemy.Tpo -c -o enemy.obj `if test -f 'enemies/enemy.cpp'; then $(CYGPATH_W) 'enemies/enemy.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/enemy.cpp'; fi`
	$(am__mv) $(DEPDIR)/enemy.Tpo $(DEPDIR)/enemy.Po
#	source='enemies/enemy.cpp' object='enemy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o enemy.obj `if test -f 'enemies/enemy.cpp'; then $(CYGPATH_W) 'enemies/enemy.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/enemy.cpp'; fi`

gee.o: enemies/gee.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gee.o -MD -MP -MF $(DEPDIR)/gee.Tpo -c -o gee.o `test -f 'enemies/gee.cpp' || echo '$(srcdir)/'`enemies/gee.cpp
	$(am__mv) $(DEPDIR)/gee.Tpo $(DEPDIR)/gee.Po
#	source='enemies/gee.cpp' object='gee.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gee.o `test -f 'enemies/gee.cpp' || echo '$(srcdir)/'`enemies/gee.cpp

gee.obj: enemies/gee.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gee.obj -MD -MP -MF $(DEPDIR)/gee.Tpo -c -o gee.obj `if test -f 'enemies/gee.cpp'; then $(CYGPATH_W) 'enemies/gee.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/gee.cpp'; fi`
	$(am__mv) $(DEPDIR)/gee.Tpo $(DEPDIR)/gee.Po
#	source='enemies/gee.cpp' object='gee.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gee.obj `if test -f 'enemies/gee.cpp'; then $(CYGPATH_W) 'enemies/gee.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/gee.cpp'; fi`

furball.o: enemies/furball.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT furball.o -MD -MP -MF $(DEPDIR)/furball.Tpo -c -o furball.o `test -f 'enemies/furball.cpp' || echo '$(srcdir)/'`enemies/furball.cpp
	$(am__mv) $(DEPDIR)/furball.Tpo $(DEPDIR)/furball.Po
#	source='enemies/furball.cpp' object='furball.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o furball.o `test -f 'enemies/furball.cpp' || echo '$(srcdir)/'`enemies/furball.cpp

furball.obj: enemies/furball.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT furball.obj -MD -MP -MF $(DEPDIR)/furball.Tpo -c -o furball.obj `if test -f 'enemies/furball.cpp'; then $(CYGPATH_W) 'enemies/furball.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/furball.cpp'; fi`
	$(am__mv) $(DEPDIR)/furball.Tpo $(DEPDIR)/furball.Po
#	source='enemies/furball.cpp' object='furball.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o furball.obj `if test -f 'enemies/furball.cpp'; then $(CYGPATH_W) 'enemies/furball.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/furball.cpp'; fi`

flyon.o: enemies/flyon.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT flyon.o -MD -MP -MF $(DEPDIR)/flyon.Tpo -c -o flyon.o `test -f 'enemies/flyon.cpp' || echo '$(srcdir)/'`enemies/flyon.cpp
	$(am__mv) $(DEPDIR)/flyon.Tpo $(DEPDIR)/flyon.Po
#	source='enemies/flyon.cpp' object='flyon.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o flyon.o `test -f 'enemies/flyon.cpp' || echo '$(srcdir)/'`enemies/flyon.cpp

flyon.obj: enemies/flyon.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT flyon.obj -MD -MP -MF $(DEPDIR)/flyon.Tpo -c -o flyon.obj `if test -f 'enemies/flyon.cpp'; then $(CYGPATH_W) 'enemies/flyon.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/flyon.cpp'; fi`
	$(am__mv) $(DEPDIR)/flyon.Tpo $(DEPDIR)/flyon.Po
#	source='enemies/flyon.cpp' object='flyon.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o flyon.obj `if test -f 'enemies/flyon.cpp'; then $(CYGPATH_W) 'enemies/flyon.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/flyon.cpp'; fi`

krush.o: enemies/krush.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT krush.o -MD -MP -MF $(DEPDIR)/krush.Tpo -c -o krush.o `test -f 'enemies/krush.cpp' || echo '$(srcdir)/'`enemies/krush.cpp
	$(am__mv) $(DEPDIR)/krush.Tpo $(DEPDIR)/krush.Po
#	source='enemies/krush.cpp' object='krush.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o krush.o `test -f 'enemies/krush.cpp' || echo '$(srcdir)/'`enemies/krush.cpp

krush.obj: enemies/krush.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT krush.obj -MD -MP -MF $(DEPDIR)/krush.Tpo -c -o krush.obj `if test -f 'enemies/krush.cpp'; then $(CYGPATH_W) 'enemies/krush.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/krush.cpp'; fi`
	$(am__mv) $(DEPDIR)/krush.Tpo $(DEPDIR)/krush.Po
#	source='enemies/krush.cpp' object='krush.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o krush.obj `if test -f 'enemies/krush.cpp'; then $(CYGPATH_W) 'enemies/krush.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/krush.cpp'; fi`

rokko.o: enemies/rokko.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT rokko.o -MD -MP -MF $(DEPDIR)/rokko.Tpo -c -o rokko.o `test -f 'enemies/rokko.cpp' || echo '$(srcdir)/'`enemies/rokko.cpp
	$(am__mv) $(DEPDIR)/rokko.Tpo $(DEPDIR)/rokko.Po
#	source='enemies/rokko.cpp' object='rokko.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o rokko.o `test -f 'enemies/rokko.cpp' || echo '$(srcdir)/'`enemies/rokko.cpp

rokko.obj: enemies/rokko.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT rokko.obj -MD -MP -MF $(DEPDIR)/rokko.Tpo -c -o rokko.obj `if test -f 'enemies/rokko.cpp'; then $(CYGPATH_W) 'enemies/rokko.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/rokko.cpp'; fi`
	$(am__mv) $(DEPDIR)/rokko.Tpo $(DEPDIR)/rokko.Po
#	source='enemies/rokko.cpp' object='rokko.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o rokko.obj `if test -f 'enemies/rokko.cpp'; then $(CYGPATH_W) 'enemies/rokko.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/rokko.cpp'; fi`

spika.o: enemies/spika.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT spika.o -MD -MP -MF $(DEPDIR)/spika.Tpo -c -o spika.o `test -f 'enemies/spika.cpp' || echo '$(srcdir)/'`enemies/spika.cpp
	$(am__mv) $(DEPDIR)/spika.Tpo $(DEPDIR)/spika.Po
#	source='enemies/spika.cpp' object='spika.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o spika.o `test -f 'enemies/spika.cpp' || echo '$(srcdir)/'`enemies/spika.cpp

spika.obj: enemies/spika.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT spika.obj -MD -MP -MF $(DEPDIR)/spika.Tpo -c -o spika.obj `if test -f 'enemies/spika.cpp'; then $(CYGPATH_W) 'enemies/spika.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/spika.cpp'; fi`
	$(am__mv) $(DEPDIR)/spika.Tpo $(DEPDIR)/spika.Po
#	source='enemies/spika.cpp' object='spika.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o spika.obj `if test -f 'enemies/spika.cpp'; then $(CYGPATH_W) 'enemies/spika.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/spika.cpp'; fi`

spikeball.o: enemies/spikeball.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT spikeball.o -MD -MP -MF $(DEPDIR)/spikeball.Tpo -c -o spikeball.o `test -f 'enemies/spikeball.cpp' || echo '$(srcdir)/'`enemies/spikeball.cpp
	$(am__mv) $(DEPDIR)/spikeball.Tpo $(DEPDIR)/spikeball.Po
#	source='enemies/spikeball.cpp' object='spikeball.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o spikeball.o `test -f 'enemies/spikeball.cpp' || echo '$(srcdir)/'`enemies/spikeball.cpp

spikeball.obj: enemies/spikeball.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT spikeball.obj -MD -MP -MF $(DEPDIR)/spikeball.Tpo -c -o spikeball.obj `if test -f 'enemies/spikeball.cpp'; then $(CYGPATH_W) 'enemies/spikeball.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/spikeball.cpp'; fi`
	$(am__mv) $(DEPDIR)/spikeball.Tpo $(DEPDIR)/spikeball.Po
#	source='enemies/spikeball.cpp' object='spikeball.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o spikeball.obj `if test -f 'enemies/spikeball.cpp'; then $(CYGPATH_W) 'enemies/spikeball.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/spikeball.cpp'; fi`

static.o: enemies/static.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT static.o -MD -MP -MF $(DEPDIR)/static.Tpo -c -o static.o `test -f 'enemies/static.cpp' || echo '$(srcdir)/'`enemies/static.cpp
	$(am__mv) $(DEPDIR)/static.Tpo $(DEPDIR)/static.Po
#	source='enemies/static.cpp' object='static.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o static.o `test -f 'enemies/static.cpp' || echo '$(srcdir)/'`enemies/static.cpp

static.obj: enemies/static.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT static.obj -MD -MP -MF $(DEPDIR)/static.Tpo -c -o static.obj `if test -f 'enemies/static.cpp'; then $(CYGPATH_W) 'enemies/static.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/static.cpp'; fi`
	$(am__mv) $(DEPDIR)/static.Tpo $(DEPDIR)/static.Po
#	source='enemies/static.cpp' object='static.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o static.obj `if test -f 'enemies/static.cpp'; then $(CYGPATH_W) 'enemies/static.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/static.cpp'; fi`

thromp.o: enemies/thromp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT thromp.o -MD -MP -MF $(DEPDIR)/thromp.Tpo -c -o thromp.o `test -f 'enemies/thromp.cpp' || echo '$(srcdir)/'`enemies/thromp.cpp
	$(am__mv) $(DEPDIR)/thromp.Tpo $(DEPDIR)/thromp.Po
#	source='enemies/thromp.cpp' object='thromp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o thromp.o `test -f 'enemies/thromp.cpp' || echo '$(srcdir)/'`enemies/thromp.cpp

thromp.obj: enemies/thromp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT thromp.obj -MD -MP -MF $(DEPDIR)/thromp.Tpo -c -o thromp.obj `if test -f 'enemies/thromp.cpp'; then $(CYGPATH_W) 'enemies/thromp.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/thromp.cpp'; fi`
	$(am__mv) $(DEPDIR)/thromp.Tpo $(DEPDIR)/thromp.Po
#	source='enemies/thromp.cpp' object='thromp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o thromp.obj `if test -f 'enemies/thromp.cpp'; then $(CYGPATH_W) 'enemies/thromp.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/thromp.cpp'; fi`

turtle.o: enemies/turtle.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT turtle.o -MD -MP -MF $(DEPDIR)/turtle.Tpo -c -o turtle.o `test -f 'enemies/turtle.cpp' || echo '$(srcdir)/'`enemies/turtle.cpp
	$(am__mv) $(DEPDIR)/turtle.Tpo $(DEPDIR)/turtle.Po
#	source='enemies/turtle.cpp' object='turtle.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o turtle.o `test -f 'enemies/turtle.cpp' || echo '$(srcdir)/'`enemies/turtle.cpp

turtle.obj: enemies/turtle.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT turtle.obj -MD -MP -MF $(DEPDIR)/turtle.Tpo -c -o turtle.obj `if test -f 'enemies/turtle.cpp'; then $(CYGPATH_W) 'enemies/turtle.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/turtle.cpp'; fi`
	$(am__mv) $(DEPDIR)/turtle.Tpo $(DEPDIR)/turtle.Po
#	source='enemies/turtle.cpp' object='turtle.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o turtle.obj `if test -f 'enemies/turtle.cpp'; then $(CYGPATH_W) 'enemies/turtle.cpp'; else $(CYGPATH_W) '$(srcdir)/enemies/turtle.cpp'; fi`

hud.o: gui/hud.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT hud.o -MD -MP -MF $(DEPDIR)/hud.Tpo -c -o hud.o `test -f 'gui/hud.cpp' || echo '$(srcdir)/'`gui/hud.cpp
	$(am__mv) $(DEPDIR)/hud.Tpo $(DEPDIR)/hud.Po
#	source='gui/hud.cpp' object='hud.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o hud.o `test -f 'gui/hud.cpp' || echo '$(srcdir)/'`gui/hud.cpp

hud.obj: gui/hud.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT hud.obj -MD -MP -MF $(DEPDIR)/hud.Tpo -c -o hud.obj `if test -f 'gui/hud.cpp'; then $(CYGPATH_W) 'gui/hud.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/hud.cpp'; fi`
	$(am__mv) $(DEPDIR)/hud.Tpo $(DEPDIR)/hud.Po
#	source='gui/hud.cpp' object='hud.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o hud.obj `if test -f 'gui/hud.cpp'; then $(CYGPATH_W) 'gui/hud.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/hud.cpp'; fi`

menu.o: gui/menu.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT menu.o -MD -MP -MF $(DEPDIR)/menu.Tpo -c -o menu.o `test -f 'gui/menu.cpp' || echo '$(srcdir)/'`gui/menu.cpp
	$(am__mv) $(DEPDIR)/menu.Tpo $(DEPDIR)/menu.Po
#	source='gui/menu.cpp' object='menu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o menu.o `test -f 'gui/menu.cpp' || echo '$(srcdir)/'`gui/menu.cpp

menu.obj: gui/menu.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT menu.obj -MD -MP -MF $(DEPDIR)/menu.Tpo -c -o menu.obj `if test -f 'gui/menu.cpp'; then $(CYGPATH_W) 'gui/menu.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/menu.cpp'; fi`
	$(am__mv) $(DEPDIR)/menu.Tpo $(DEPDIR)/menu.Po
#	source='gui/menu.cpp' object='menu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o menu.obj `if test -f 'gui/menu.cpp'; then $(CYGPATH_W) 'gui/menu.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/menu.cpp'; fi`

menu_data.o: gui/menu_data.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT menu_data.o -MD -MP -MF $(DEPDIR)/menu_data.Tpo -c -o menu_data.o `test -f 'gui/menu_data.cpp' || echo '$(srcdir)/'`gui/menu_data.cpp
	$(am__mv) $(DEPDIR)/menu_data.Tpo $(DEPDIR)/menu_data.Po
#	source='gui/menu_data.cpp' object='menu_data.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o menu_data.o `test -f 'gui/menu_data.cpp' || echo '$(srcdir)/'`gui/menu_data.cpp

menu_data.obj: gui/menu_data.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT menu_data.obj -MD -MP -MF $(DEPDIR)/menu_data.Tpo -c -o menu_data.obj `if test -f 'gui/menu_data.cpp'; then $(CYGPATH_W) 'gui/menu_data.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/menu_data.cpp'; fi`
	$(am__mv) $(DEPDIR)/menu_data.Tpo $(DEPDIR)/menu_data.Po
#	source='gui/menu_data.cpp' object='menu_data.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o menu_data.obj `if test -f 'gui/menu_data.cpp'; then $(CYGPATH_W) 'gui/menu_data.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/menu_data.cpp'; fi`

joystick.o: input/joystick.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT joystick.o -MD -MP -MF $(DEPDIR)/joystick.Tpo -c -o joystick.o `test -f 'input/joystick.cpp' || echo '$(srcdir)/'`input/joystick.cpp
	$(am__mv) $(DEPDIR)/joystick.Tpo $(DEPDIR)/joystick.Po
#	source='input/joystick.cpp' object='joystick.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o joystick.o `test -f 'input/joystick.cpp' || echo '$(srcdir)/'`input/joystick.cpp

joystick.obj: input/joystick.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT joystick.obj -MD -MP -MF $(DEPDIR)/joystick.Tpo -c -o joystick.obj `if test -f 'input/joystick.cpp'; then $(CYGPATH_W) 'input/joystick.cpp'; else $(CYGPATH_W) '$(srcdir)/input/joystick.cpp'; fi`
	$(am__mv) $(DEPDIR)/joystick.Tpo $(DEPDIR)/joystick.Po
#	source='input/joystick.cpp' object='joystick.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o joystick.obj `if test -f 'input/joystick.cpp'; then $(CYGPATH_W) 'input/joystick.cpp'; else $(CYGPATH_W) '$(srcdir)/input/joystick.cpp'; fi`

keyboard.o: input/keyboard.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT keyboard.o -MD -MP -MF $(DEPDIR)/keyboard.Tpo -c -o keyboard.o `test -f 'input/keyboard.cpp' || echo '$(srcdir)/'`input/keyboard.cpp
	$(am__mv) $(DEPDIR)/keyboard.Tpo $(DEPDIR)/keyboard.Po
#	source='input/keyboard.cpp' object='keyboard.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o keyboard.o `test -f 'input/keyboard.cpp' || echo '$(srcdir)/'`input/keyboard.cpp

keyboard.obj: input/keyboard.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT keyboard.obj -MD -MP -MF $(DEPDIR)/keyboard.Tpo -c -o keyboard.obj `if test -f 'input/keyboard.cpp'; then $(CYGPATH_W) 'input/keyboard.cpp'; else $(CYGPATH_W) '$(srcdir)/input/keyboard.cpp'; fi`
	$(am__mv) $(DEPDIR)/keyboard.Tpo $(DEPDIR)/keyboard.Po
#	source='input/keyboard.cpp' object='keyboard.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o keyboard.obj `if test -f 'input/keyboard.cpp'; then $(CYGPATH_W) 'input/keyboard.cpp'; else $(CYGPATH_W) '$(srcdir)/input/keyboard.cpp'; fi`

mouse.o: input/mouse.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mouse.o -MD -MP -MF $(DEPDIR)/mouse.Tpo -c -o mouse.o `test -f 'input/mouse.cpp' || echo '$(srcdir)/'`input/mouse.cpp
	$(am__mv) $(DEPDIR)/mouse.Tpo $(DEPDIR)/mouse.Po
#	source='input/mouse.cpp' object='mouse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mouse.o `test -f 'input/mouse.cpp' || echo '$(srcdir)/'`input/mouse.cpp

mouse.obj: input/mouse.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mouse.obj -MD -MP -MF $(DEPDIR)/mouse.Tpo -c -o mouse.obj `if test -f 'input/mouse.cpp'; then $(CYGPATH_W) 'input/mouse.cpp'; else $(CYGPATH_W) '$(srcdir)/input/mouse.cpp'; fi`
	$(am__mv) $(DEPDIR)/mouse.Tpo $(DEPDIR)/mouse.Po
#	source='input/mouse.cpp' object='mouse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mouse.obj `if test -f 'input/mouse.cpp'; then $(CYGPATH_W) 'input/mouse.cpp'; else $(CYGPATH_W) '$(srcdir)/input/mouse.cpp'; fi`

global_effect.o: level/global_effect.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT global_effect.o -MD -MP -MF $(DEPDIR)/global_effect.Tpo -c -o global_effect.o `test -f 'level/global_effect.cpp' || echo '$(srcdir)/'`level/global_effect.cpp
	$(am__mv) $(DEPDIR)/global_effect.Tpo $(DEPDIR)/global_effect.Po
#	source='level/global_effect.cpp' object='global_effect.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o global_effect.o `test -f 'level/global_effect.cpp' || echo '$(srcdir)/'`level/global_effect.cpp

global_effect.obj: level/global_effect.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT global_effect.obj -MD -MP -MF $(DEPDIR)/global_effect.Tpo -c -o global_effect.obj `if test -f 'level/global_effect.cpp'; then $(CYGPATH_W) 'level/global_effect.cpp'; else $(CYGPATH_W) '$(srcdir)/level/global_effect.cpp'; fi`
	$(am__mv) $(DEPDIR)/global_effect.Tpo $(DEPDIR)/global_effect.Po
#	source='level/global_effect.cpp' object='global_effect.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o global_effect.obj `if test -f 'level/global_effect.cpp'; then $(CYGPATH_W) 'level/global_effect.cpp'; else $(CYGPATH_W) '$(srcdir)/level/global_effect.cpp'; fi`

level_background.o: level/level_background.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level_background.o -MD -MP -MF $(DEPDIR)/level_background.Tpo -c -o level_background.o `test -f 'level/level_background.cpp' || echo '$(srcdir)/'`level/level_background.cpp
	$(am__mv) $(DEPDIR)/level_background.Tpo $(DEPDIR)/level_background.Po
#	source='level/level_background.cpp' object='level_background.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level_background.o `test -f 'level/level_background.cpp' || echo '$(srcdir)/'`level/level_background.cpp

level_background.obj: level/level_background.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level_background.obj -MD -MP -MF $(DEPDIR)/level_background.Tpo -c -o level_background.obj `if test -f 'level/level_background.cpp'; then $(CYGPATH_W) 'level/level_background.cpp'; else $(CYGPATH_W) '$(srcdir)/level/level_background.cpp'; fi`
	$(am__mv) $(DEPDIR)/level_background.Tpo $(DEPDIR)/level_background.Po
#	source='level/level_background.cpp' object='level_background.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level_background.obj `if test -f 'level/level_background.cpp'; then $(CYGPATH_W) 'level/level_background.cpp'; else $(CYGPATH_W) '$(srcdir)/level/level_background.cpp'; fi`

level.o: level/level.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level.o -MD -MP -MF $(DEPDIR)/level.Tpo -c -o level.o `test -f 'level/level.cpp' || echo '$(srcdir)/'`level/level.cpp
	$(am__mv) $(DEPDIR)/level.Tpo $(DEPDIR)/level.Po
#	source='level/level.cpp' object='level.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level.o `test -f 'level/level.cpp' || echo '$(srcdir)/'`level/level.cpp

level.obj: level/level.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level.obj -MD -MP -MF $(DEPDIR)/level.Tpo -c -o level.obj `if test -f 'level/level.cpp'; then $(CYGPATH_W) 'level/level.cpp'; else $(CYGPATH_W) '$(srcdir)/level/level.cpp'; fi`
	$(am__mv) $(DEPDIR)/level.Tpo $(DEPDIR)/level.Po
#	source='level/level.cpp' object='level.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level.obj `if test -f 'level/level.cpp'; then $(CYGPATH_W) 'level/level.cpp'; else $(CYGPATH_W) '$(srcdir)/level/level.cpp'; fi`

level_editor.o: level/level_editor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level_editor.o -MD -MP -MF $(DEPDIR)/level_editor.Tpo -c -o level_editor.o `test -f 'level/level_editor.cpp' || echo '$(srcdir)/'`level/level_editor.cpp
	$(am__mv) $(DEPDIR)/level_editor.Tpo $(DEPDIR)/level_editor.Po
#	source='level/level_editor.cpp' object='level_editor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level_editor.o `test -f 'level/level_editor.cpp' || echo '$(srcdir)/'`level/level_editor.cpp

level_editor.obj: level/level_editor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level_editor.obj -MD -MP -MF $(DEPDIR)/level_editor.Tpo -c -o level_editor.obj `if test -f 'level/level_editor.cpp'; then $(CYGPATH_W) 'level/level_editor.cpp'; else $(CYGPATH_W) '$(srcdir)/level/level_editor.cpp'; fi`
	$(am__mv) $(DEPDIR)/level_editor.Tpo $(DEPDIR)/level_editor.Po
#	source='level/level_editor.cpp' object='level_editor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level_editor.obj `if test -f 'level/level_editor.cpp'; then $(CYGPATH_W) 'level/level_editor.cpp'; else $(CYGPATH_W) '$(srcdir)/level/level_editor.cpp'; fi`

level_manager.o: level/level_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level_manager.o -MD -MP -MF $(DEPDIR)/level_manager.Tpo -c -o level_manager.o `test -f 'level/level_manager.cpp' || echo '$(srcdir)/'`level/level_manager.cpp
	$(am__mv) $(DEPDIR)/level_manager.Tpo $(DEPDIR)/level_manager.Po
#	source='level/level_manager.cpp' object='level_manager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level_manager.o `test -f 'level/level_manager.cpp' || echo '$(srcdir)/'`level/level_manager.cpp

level_manager.obj: level/level_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level_manager.obj -MD -MP -MF $(DEPDIR)/level_manager.Tpo -c -o level_manager.obj `if test -f 'level/level_manager.cpp'; then $(CYGPATH_W) 'level/level_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/level/level_manager.cpp'; fi`
	$(am__mv) $(DEPDIR)/level_manager.Tpo $(DEPDIR)/level_manager.Po
#	source='level/level_manager.cpp' object='level_manager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level_manager.obj `if test -f 'level/level_manager.cpp'; then $(CYGPATH_W) 'level/level_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/level/level_manager.cpp'; fi`

level_settings.o: level/level_settings.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level_settings.o -MD -MP -MF $(DEPDIR)/level_settings.Tpo -c -o level_settings.o `test -f 'level/level_settings.cpp' || echo '$(srcdir)/'`level/level_settings.cpp
	$(am__mv) $(DEPDIR)/level_settings.Tpo $(DEPDIR)/level_settings.Po
#	source='level/level_settings.cpp' object='level_settings.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level_settings.o `test -f 'level/level_settings.cpp' || echo '$(srcdir)/'`level/level_settings.cpp

level_settings.obj: level/level_settings.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level_settings.obj -MD -MP -MF $(DEPDIR)/level_settings.Tpo -c -o level_settings.obj `if test -f 'level/level_settings.cpp'; then $(CYGPATH_W) 'level/level_settings.cpp'; else $(CYGPATH_W) '$(srcdir)/level/level_settings.cpp'; fi`
	$(am__mv) $(DEPDIR)/level_settings.Tpo $(DEPDIR)/level_settings.Po
#	source='level/level_settings.cpp' object='level_settings.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level_settings.obj `if test -f 'level/level_settings.cpp'; then $(CYGPATH_W) 'level/level_settings.cpp'; else $(CYGPATH_W) '$(srcdir)/level/level_settings.cpp'; fi`

animated_sprite.o: objects/animated_sprite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT animated_sprite.o -MD -MP -MF $(DEPDIR)/animated_sprite.Tpo -c -o animated_sprite.o `test -f 'objects/animated_sprite.cpp' || echo '$(srcdir)/'`objects/animated_sprite.cpp
	$(am__mv) $(DEPDIR)/animated_sprite.Tpo $(DEPDIR)/animated_sprite.Po
#	source='objects/animated_sprite.cpp' object='animated_sprite.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o animated_sprite.o `test -f 'objects/animated_sprite.cpp' || echo '$(srcdir)/'`objects/animated_sprite.cpp

animated_sprite.obj: objects/animated_sprite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT animated_sprite.obj -MD -MP -MF $(DEPDIR)/animated_sprite.Tpo -c -o animated_sprite.obj `if test -f 'objects/animated_sprite.cpp'; then $(CYGPATH_W) 'objects/animated_sprite.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/animated_sprite.cpp'; fi`
	$(am__mv) $(DEPDIR)/animated_sprite.Tpo $(DEPDIR)/animated_sprite.Po
#	source='objects/animated_sprite.cpp' object='animated_sprite.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o animated_sprite.obj `if test -f 'objects/animated_sprite.cpp'; then $(CYGPATH_W) 'objects/animated_sprite.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/animated_sprite.cpp'; fi`

ball.o: objects/ball.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ball.o -MD -MP -MF $(DEPDIR)/ball.Tpo -c -o ball.o `test -f 'objects/ball.cpp' || echo '$(srcdir)/'`objects/ball.cpp
	$(am__mv) $(DEPDIR)/ball.Tpo $(DEPDIR)/ball.Po
#	source='objects/ball.cpp' object='ball.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ball.o `test -f 'objects/ball.cpp' || echo '$(srcdir)/'`objects/ball.cpp

ball.obj: objects/ball.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ball.obj -MD -MP -MF $(DEPDIR)/ball.Tpo -c -o ball.obj `if test -f 'objects/ball.cpp'; then $(CYGPATH_W) 'objects/ball.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/ball.cpp'; fi`
	$(am__mv) $(DEPDIR)/ball.Tpo $(DEPDIR)/ball.Po
#	source='objects/ball.cpp' object='ball.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ball.obj `if test -f 'objects/ball.cpp'; then $(CYGPATH_W) 'objects/ball.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/ball.cpp'; fi`

bonusbox.o: objects/bonusbox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bonusbox.o -MD -MP -MF $(DEPDIR)/bonusbox.Tpo -c -o bonusbox.o `test -f 'objects/bonusbox.cpp' || echo '$(srcdir)/'`objects/bonusbox.cpp
	$(am__mv) $(DEPDIR)/bonusbox.Tpo $(DEPDIR)/bonusbox.Po
#	source='objects/bonusbox.cpp' object='bonusbox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bonusbox.o `test -f 'objects/bonusbox.cpp' || echo '$(srcdir)/'`objects/bonusbox.cpp

bonusbox.obj: objects/bonusbox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bonusbox.obj -MD -MP -MF $(DEPDIR)/bonusbox.Tpo -c -o bonusbox.obj `if test -f 'objects/bonusbox.cpp'; then $(CYGPATH_W) 'objects/bonusbox.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/bonusbox.cpp'; fi`
	$(am__mv) $(DEPDIR)/bonusbox.Tpo $(DEPDIR)/bonusbox.Po
#	source='objects/bonusbox.cpp' object='bonusbox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bonusbox.obj `if test -f 'objects/bonusbox.cpp'; then $(CYGPATH_W) 'objects/bonusbox.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/bonusbox.cpp'; fi`

box.o: objects/box.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT box.o -MD -MP -MF $(DEPDIR)/box.Tpo -c -o box.o `test -f 'objects/box.cpp' || echo '$(srcdir)/'`objects/box.cpp
	$(am__mv) $(DEPDIR)/box.Tpo $(DEPDIR)/box.Po
#	source='objects/box.cpp' object='box.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o box.o `test -f 'objects/box.cpp' || echo '$(srcdir)/'`objects/box.cpp

box.obj: objects/box.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT box.obj -MD -MP -MF $(DEPDIR)/box.Tpo -c -o box.obj `if test -f 'objects/box.cpp'; then $(CYGPATH_W) 'objects/box.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/box.cpp'; fi`
	$(am__mv) $(DEPDIR)/box.Tpo $(DEPDIR)/box.Po
#	source='objects/box.cpp' object='box.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o box.obj `if test -f 'objects/box.cpp'; then $(CYGPATH_W) 'objects/box.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/box.cpp'; fi`

enemystopper.o: objects/enemystopper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT enemystopper.o -MD -MP -MF $(DEPDIR)/enemystopper.Tpo -c -o enemystopper.o `test -f 'objects/enemystopper.cpp' || echo '$(srcdir)/'`objects/enemystopper.cpp
	$(am__mv) $(DEPDIR)/enemystopper.Tpo $(DEPDIR)/enemystopper.Po
#	source='objects/enemystopper.cpp' object='enemystopper.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o enemystopper.o `test -f 'objects/enemystopper.cpp' || echo '$(srcdir)/'`objects/enemystopper.cpp

enemystopper.obj: objects/enemystopper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT enemystopper.obj -MD -MP -MF $(DEPDIR)/enemystopper.Tpo -c -o enemystopper.obj `if test -f 'objects/enemystopper.cpp'; then $(CYGPATH_W) 'objects/enemystopper.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/enemystopper.cpp'; fi`
	$(am__mv) $(DEPDIR)/enemystopper.Tpo $(DEPDIR)/enemystopper.Po
#	source='objects/enemystopper.cpp' object='enemystopper.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o enemystopper.obj `if test -f 'objects/enemystopper.cpp'; then $(CYGPATH_W) 'objects/enemystopper.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/enemystopper.cpp'; fi`

goldpiece.o: objects/goldpiece.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT goldpiece.o -MD -MP -MF $(DEPDIR)/goldpiece.Tpo -c -o goldpiece.o `test -f 'objects/goldpiece.cpp' || echo '$(srcdir)/'`objects/goldpiece.cpp
	$(am__mv) $(DEPDIR)/goldpiece.Tpo $(DEPDIR)/goldpiece.Po
#	source='objects/goldpiece.cpp' object='goldpiece.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o goldpiece.o `test -f 'objects/goldpiece.cpp' || echo '$(srcdir)/'`objects/goldpiece.cpp

goldpiece.obj: objects/goldpiece.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT goldpiece.obj -MD -MP -MF $(DEPDIR)/goldpiece.Tpo -c -o goldpiece.obj `if test -f 'objects/goldpiece.cpp'; then $(CYGPATH_W) 'objects/goldpiece.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/goldpiece.cpp'; fi`
	$(am__mv) $(DEPDIR)/goldpiece.Tpo $(DEPDIR)/goldpiece.Po
#	source='objects/goldpiece.cpp' object='goldpiece.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o goldpiece.obj `if test -f 'objects/goldpiece.cpp'; then $(CYGPATH_W) 'objects/goldpiece.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/goldpiece.cpp'; fi`

level_entry.o: objects/level_entry.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level_entry.o -MD -MP -MF $(DEPDIR)/level_entry.Tpo -c -o level_entry.o `test -f 'objects/level_entry.cpp' || echo '$(srcdir)/'`objects/level_entry.cpp
	$(am__mv) $(DEPDIR)/level_entry.Tpo $(DEPDIR)/level_entry.Po
#	source='objects/level_entry.cpp' object='level_entry.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level_entry.o `test -f 'objects/level_entry.cpp' || echo '$(srcdir)/'`objects/level_entry.cpp

level_entry.obj: objects/level_entry.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level_entry.obj -MD -MP -MF $(DEPDIR)/level_entry.Tpo -c -o level_entry.obj `if test -f 'objects/level_entry.cpp'; then $(CYGPATH_W) 'objects/level_entry.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/level_entry.cpp'; fi`
	$(am__mv) $(DEPDIR)/level_entry.Tpo $(DEPDIR)/level_entry.Po
#	source='objects/level_entry.cpp' object='level_entry.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level_entry.obj `if test -f 'objects/level_entry.cpp'; then $(CYGPATH_W) 'objects/level_entry.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/level_entry.cpp'; fi`

level_exit.o: objects/level_exit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level_exit.o -MD -MP -MF $(DEPDIR)/level_exit.Tpo -c -o level_exit.o `test -f 'objects/level_exit.cpp' || echo '$(srcdir)/'`objects/level_exit.cpp
	$(am__mv) $(DEPDIR)/level_exit.Tpo $(DEPDIR)/level_exit.Po
#	source='objects/level_exit.cpp' object='level_exit.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level_exit.o `test -f 'objects/level_exit.cpp' || echo '$(srcdir)/'`objects/level_exit.cpp

level_exit.obj: objects/level_exit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT level_exit.obj -MD -MP -MF $(DEPDIR)/level_exit.Tpo -c -o level_exit.obj `if test -f 'objects/level_exit.cpp'; then $(CYGPATH_W) 'objects/level_exit.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/level_exit.cpp'; fi`
	$(am__mv) $(DEPDIR)/level_exit.Tpo $(DEPDIR)/level_exit.Po
#	source='objects/level_exit.cpp' object='level_exit.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o level_exit.obj `if test -f 'objects/level_exit.cpp'; then $(CYGPATH_W) 'objects/level_exit.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/level_exit.cpp'; fi`

moving_platform.o: objects/moving_platform.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT moving_platform.o -MD -MP -MF $(DEPDIR)/moving_platform.Tpo -c -o moving_platform.o `test -f 'objects/moving_platform.cpp' || echo '$(srcdir)/'`objects/moving_platform.cpp
	$(am__mv) $(DEPDIR)/moving_platform.Tpo $(DEPDIR)/moving_platform.Po
#	source='objects/moving_platform.cpp' object='moving_platform.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o moving_platform.o `test -f 'objects/moving_platform.cpp' || echo '$(srcdir)/'`objects/moving_platform.cpp

moving_platform.obj: objects/moving_platform.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT moving_platform.obj -MD -MP -MF $(DEPDIR)/moving_platform.Tpo -c -o moving_platform.obj `if test -f 'objects/moving_platform.cpp'; then $(CYGPATH_W) 'objects/moving_platform.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/moving_platform.cpp'; fi`
	$(am__mv) $(DEPDIR)/moving_platform.Tpo $(DEPDIR)/moving_platform.Po
#	source='objects/moving_platform.cpp' object='moving_platform.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o moving_platform.obj `if test -f 'objects/moving_platform.cpp'; then $(CYGPATH_W) 'objects/moving_platform.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/moving_platform.cpp'; fi`

movingsprite.o: objects/movingsprite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT movingsprite.o -MD -MP -MF $(DEPDIR)/movingsprite.Tpo -c -o movingsprite.o `test -f 'objects/movingsprite.cpp' || echo '$(srcdir)/'`objects/movingsprite.cpp
	$(am__mv) $(DEPDIR)/movingsprite.Tpo $(DEPDIR)/movingsprite.Po
#	source='objects/movingsprite.cpp' object='movingsprite.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o movingsprite.o `test -f 'objects/movingsprite.cpp' || echo '$(srcdir)/'`objects/movingsprite.cpp

movingsprite.obj: objects/movingsprite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT movingsprite.obj -MD -MP -MF $(DEPDIR)/movingsprite.Tpo -c -o movingsprite.obj `if test -f 'objects/movingsprite.cpp'; then $(CYGPATH_W) 'objects/movingsprite.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/movingsprite.cpp'; fi`
	$(am__mv) $(DEPDIR)/movingsprite.Tpo $(DEPDIR)/movingsprite.Po
#	source='objects/movingsprite.cpp' object='movingsprite.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o movingsprite.obj `if test -f 'objects/movingsprite.cpp'; then $(CYGPATH_W) 'objects/movingsprite.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/movingsprite.cpp'; fi`

path.o: objects/path.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT path.o -MD -MP -MF $(DEPDIR)/path.Tpo -c -o path.o `test -f 'objects/path.cpp' || echo '$(srcdir)/'`objects/path.cpp
	$(am__mv) $(DEPDIR)/path.Tpo $(DEPDIR)/path.Po
#	source='objects/path.cpp' object='path.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o path.o `test -f 'objects/path.cpp' || echo '$(srcdir)/'`objects/path.cpp

path.obj: objects/path.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT path.obj -MD -MP -MF $(DEPDIR)/path.Tpo -c -o path.obj `if test -f 'objects/path.cpp'; then $(CYGPATH_W) 'objects/path.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/path.cpp'; fi`
	$(am__mv) $(DEPDIR)/path.Tpo $(DEPDIR)/path.Po
#	source='objects/path.cpp' object='path.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o path.obj `if test -f 'objects/path.cpp'; then $(CYGPATH_W) 'objects/path.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/path.cpp'; fi`

powerup.o: objects/powerup.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT powerup.o -MD -MP -MF $(DEPDIR)/powerup.Tpo -c -o powerup.o `test -f 'objects/powerup.cpp' || echo '$(srcdir)/'`objects/powerup.cpp
	$(am__mv) $(DEPDIR)/powerup.Tpo $(DEPDIR)/powerup.Po
#	source='objects/powerup.cpp' object='powerup.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o powerup.o `test -f 'objects/powerup.cpp' || echo '$(srcdir)/'`objects/powerup.cpp

powerup.obj: objects/powerup.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT powerup.obj -MD -MP -MF $(DEPDIR)/powerup.Tpo -c -o powerup.obj `if test -f 'objects/powerup.cpp'; then $(CYGPATH_W) 'objects/powerup.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/powerup.cpp'; fi`
	$(am__mv) $(DEPDIR)/powerup.Tpo $(DEPDIR)/powerup.Po
#	source='objects/powerup.cpp' object='powerup.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o powerup.obj `if test -f 'objects/powerup.cpp'; then $(CYGPATH_W) 'objects/powerup.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/powerup.cpp'; fi`

spinbox.o: objects/spinbox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT spinbox.o -MD -MP -MF $(DEPDIR)/spinbox.Tpo -c -o spinbox.o `test -f 'objects/spinbox.cpp' || echo '$(srcdir)/'`objects/spinbox.cpp
	$(am__mv) $(DEPDIR)/spinbox.Tpo $(DEPDIR)/spinbox.Po
#	source='objects/spinbox.cpp' object='spinbox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o spinbox.o `test -f 'objects/spinbox.cpp' || echo '$(srcdir)/'`objects/spinbox.cpp

spinbox.obj: objects/spinbox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT spinbox.obj -MD -MP -MF $(DEPDIR)/spinbox.Tpo -c -o spinbox.obj `if test -f 'objects/spinbox.cpp'; then $(CYGPATH_W) 'objects/spinbox.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/spinbox.cpp'; fi`
	$(am__mv) $(DEPDIR)/spinbox.Tpo $(DEPDIR)/spinbox.Po
#	source='objects/spinbox.cpp' object='spinbox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o spinbox.obj `if test -f 'objects/spinbox.cpp'; then $(CYGPATH_W) 'objects/spinbox.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/spinbox.cpp'; fi`

sprite.o: objects/sprite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sprite.o -MD -MP -MF $(DEPDIR)/sprite.Tpo -c -o sprite.o `test -f 'objects/sprite.cpp' || echo '$(srcdir)/'`objects/sprite.cpp
	$(am__mv) $(DEPDIR)/sprite.Tpo $(DEPDIR)/sprite.Po
#	source='objects/sprite.cpp' object='sprite.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sprite.o `test -f 'objects/sprite.cpp' || echo '$(srcdir)/'`objects/sprite.cpp

sprite.obj: objects/sprite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sprite.obj -MD -MP -MF $(DEPDIR)/sprite.Tpo -c -o sprite.obj `if test -f 'objects/sprite.cpp'; then $(CYGPATH_W) 'objects/sprite.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/sprite.cpp'; fi`
	$(am__mv) $(DEPDIR)/sprite.Tpo $(DEPDIR)/sprite.Po
#	source='objects/sprite.cpp' object='sprite.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sprite.obj `if test -f 'objects/sprite.cpp'; then $(CYGPATH_W) 'objects/sprite.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/sprite.cpp'; fi`

star.o: objects/star.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT star.o -MD -MP -MF $(DEPDIR)/star.Tpo -c -o star.o `test -f 'objects/star.cpp' || echo '$(srcdir)/'`objects/star.cpp
	$(am__mv) $(DEPDIR)/star.Tpo $(DEPDIR)/star.Po
#	source='objects/star.cpp' object='star.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o star.o `test -f 'objects/star.cpp' || echo '$(srcdir)/'`objects/star.cpp

star.obj: objects/star.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT star.obj -MD -MP -MF $(DEPDIR)/star.Tpo -c -o star.obj `if test -f 'objects/star.cpp'; then $(CYGPATH_W) 'objects/star.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/star.cpp'; fi`
	$(am__mv) $(DEPDIR)/star.Tpo $(DEPDIR)/star.Po
#	source='objects/star.cpp' object='star.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o star.obj `if test -f 'objects/star.cpp'; then $(CYGPATH_W) 'objects/star.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/star.cpp'; fi`

text_box.o: objects/text_box.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT text_box.o -MD -MP -MF $(DEPDIR)/text_box.Tpo -c -o text_box.o `test -f 'objects/text_box.cpp' || echo '$(srcdir)/'`objects/text_box.cpp
	$(am__mv) $(DEPDIR)/text_box.Tpo $(DEPDIR)/text_box.Po
#	source='objects/text_box.cpp' object='text_box.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o text_box.o `test -f 'objects/text_box.cpp' || echo '$(srcdir)/'`objects/text_box.cpp

text_box.obj: objects/text_box.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT text_box.obj -MD -MP -MF $(DEPDIR)/text_box.Tpo -c -o text_box.obj `if test -f 'objects/text_box.cpp'; then $(CYGPATH_W) 'objects/text_box.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/text_box.cpp'; fi`
	$(am__mv) $(DEPDIR)/text_box.Tpo $(DEPDIR)/text_box.Po
#	source='objects/text_box.cpp' object='text_box.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o text_box.obj `if test -f 'objects/text_box.cpp'; then $(CYGPATH_W) 'objects/text_box.cpp'; else $(CYGPATH_W) '$(srcdir)/objects/text_box.cpp'; fi`

world_layer.o: overworld/world_layer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT world_layer.o -MD -MP -MF $(DEPDIR)/world_layer.Tpo -c -o world_layer.o `test -f 'overworld/world_layer.cpp' || echo '$(srcdir)/'`overworld/world_layer.cpp
	$(am__mv) $(DEPDIR)/world_layer.Tpo $(DEPDIR)/world_layer.Po
#	source='overworld/world_layer.cpp' object='world_layer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o world_layer.o `test -f 'overworld/world_layer.cpp' || echo '$(srcdir)/'`overworld/world_layer.cpp

world_layer.obj: overworld/world_layer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT world_layer.obj -MD -MP -MF $(DEPDIR)/world_layer.Tpo -c -o world_layer.obj `if test -f 'overworld/world_layer.cpp'; then $(CYGPATH_W) 'overworld/world_layer.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/world_layer.cpp'; fi`
	$(am__mv) $(DEPDIR)/world_layer.Tpo $(DEPDIR)/world_layer.Po
#	source='overworld/world_layer.cpp' object='world_layer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o world_layer.obj `if test -f 'overworld/world_layer.cpp'; then $(CYGPATH_W) 'overworld/world_layer.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/world_layer.cpp'; fi`

overworld.o: overworld/overworld.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT overworld.o -MD -MP -MF $(DEPDIR)/overworld.Tpo -c -o overworld.o `test -f 'overworld/overworld.cpp' || echo '$(srcdir)/'`overworld/overworld.cpp
	$(am__mv) $(DEPDIR)/overworld.Tpo $(DEPDIR)/overworld.Po
#	source='overworld/overworld.cpp' object='overworld.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o overworld.o `test -f 'overworld/overworld.cpp' || echo '$(srcdir)/'`overworld/overworld.cpp

overworld.obj: overworld/overworld.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT overworld.obj -MD -MP -MF $(DEPDIR)/overworld.Tpo -c -o overworld.obj `if test -f 'overworld/overworld.cpp'; then $(CYGPATH_W) 'overworld/overworld.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/overworld.cpp'; fi`
	$(am__mv) $(DEPDIR)/overworld.Tpo $(DEPDIR)/overworld.Po
#	source='overworld/overworld.cpp' object='overworld.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o overworld.obj `if test -f 'overworld/overworld.cpp'; then $(CYGPATH_W) 'overworld/overworld.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/overworld.cpp'; fi`

world_player.o: overworld/world_player.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT world_player.o -MD -MP -MF $(DEPDIR)/world_player.Tpo -c -o world_player.o `test -f 'overworld/world_player.cpp' || echo '$(srcdir)/'`overworld/world_player.cpp
	$(am__mv) $(DEPDIR)/world_player.Tpo $(DEPDIR)/world_player.Po
#	source='overworld/world_player.cpp' object='world_player.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o world_player.o `test -f 'overworld/world_player.cpp' || echo '$(srcdir)/'`overworld/world_player.cpp

world_player.obj: overworld/world_player.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT world_player.obj -MD -MP -MF $(DEPDIR)/world_player.Tpo -c -o world_player.obj `if test -f 'overworld/world_player.cpp'; then $(CYGPATH_W) 'overworld/world_player.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/world_player.cpp'; fi`
	$(am__mv) $(DEPDIR)/world_player.Tpo $(DEPDIR)/world_player.Po
#	source='overworld/world_player.cpp' object='world_player.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o world_player.obj `if test -f 'overworld/world_player.cpp'; then $(CYGPATH_W) 'overworld/world_player.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/world_player.cpp'; fi`

world_waypoint.o: overworld/world_waypoint.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT world_waypoint.o -MD -MP -MF $(DEPDIR)/world_waypoint.Tpo -c -o world_waypoint.o `test -f 'overworld/world_waypoint.cpp' || echo '$(srcdir)/'`overworld/world_waypoint.cpp
	$(am__mv) $(DEPDIR)/world_waypoint.Tpo $(DEPDIR)/world_waypoint.Po
#	source='overworld/world_waypoint.cpp' object='world_waypoint.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o world_waypoint.o `test -f 'overworld/world_waypoint.cpp' || echo '$(srcdir)/'`overworld/world_waypoint.cpp

world_waypoint.obj: overworld/world_waypoint.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT world_waypoint.obj -MD -MP -MF $(DEPDIR)/world_waypoint.Tpo -c -o world_waypoint.obj `if test -f 'overworld/world_waypoint.cpp'; then $(CYGPATH_W) 'overworld/world_waypoint.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/world_waypoint.cpp'; fi`
	$(am__mv) $(DEPDIR)/world_waypoint.Tpo $(DEPDIR)/world_waypoint.Po
#	source='overworld/world_waypoint.cpp' object='world_waypoint.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o world_waypoint.obj `if test -f 'overworld/world_waypoint.cpp'; then $(CYGPATH_W) 'overworld/world_waypoint.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/world_waypoint.cpp'; fi`

world_editor.o: overworld/world_editor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT world_editor.o -MD -MP -MF $(DEPDIR)/world_editor.Tpo -c -o world_editor.o `test -f 'overworld/world_editor.cpp' || echo '$(srcdir)/'`overworld/world_editor.cpp
	$(am__mv) $(DEPDIR)/world_editor.Tpo $(DEPDIR)/world_editor.Po
#	source='overworld/world_editor.cpp' object='world_editor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o world_editor.o `test -f 'overworld/world_editor.cpp' || echo '$(srcdir)/'`overworld/world_editor.cpp

world_editor.obj: overworld/world_editor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT world_editor.obj -MD -MP -MF $(DEPDIR)/world_editor.Tpo -c -o world_editor.obj `if test -f 'overworld/world_editor.cpp'; then $(CYGPATH_W) 'overworld/world_editor.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/world_editor.cpp'; fi`
	$(am__mv) $(DEPDIR)/world_editor.Tpo $(DEPDIR)/world_editor.Po
#	source='overworld/world_editor.cpp' object='world_editor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o world_editor.obj `if test -f 'overworld/world_editor.cpp'; then $(CYGPATH_W) 'overworld/world_editor.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/world_editor.cpp'; fi`

world_manager.o: overworld/world_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT world_manager.o -MD -MP -MF $(DEPDIR)/world_manager.Tpo -c -o world_manager.o `test -f 'overworld/world_manager.cpp' || echo '$(srcdir)/'`overworld/world_manager.cpp
	$(am__mv) $(DEPDIR)/world_manager.Tpo $(DEPDIR)/world_manager.Po
#	source='overworld/world_manager.cpp' object='world_manager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o world_manager.o `test -f 'overworld/world_manager.cpp' || echo '$(srcdir)/'`overworld/world_manager.cpp

world_manager.obj: overworld/world_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT world_manager.obj -MD -MP -MF $(DEPDIR)/world_manager.Tpo -c -o world_manager.obj `if test -f 'overworld/world_manager.cpp'; then $(CYGPATH_W) 'overworld/world_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/world_manager.cpp'; fi`
	$(am__mv) $(DEPDIR)/world_manager.Tpo $(DEPDIR)/world_manager.Po
#	source='overworld/world_manager.cpp' object='world_manager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o world_manager.obj `if test -f 'overworld/world_manager.cpp'; then $(CYGPATH_W) 'overworld/world_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/world_manager.cpp'; fi`

world_sprite_manager.o: overworld/world_sprite_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT world_sprite_manager.o -MD -MP -MF $(DEPDIR)/world_sprite_manager.Tpo -c -o world_sprite_manager.o `test -f 'overworld/world_sprite_manager.cpp' || echo '$(srcdir)/'`overworld/world_sprite_manager.cpp
	$(am__mv) $(DEPDIR)/world_sprite_manager.Tpo $(DEPDIR)/world_sprite_manager.Po
#	source='overworld/world_sprite_manager.cpp' object='world_sprite_manager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o world_sprite_manager.o `test -f 'overworld/world_sprite_manager.cpp' || echo '$(srcdir)/'`overworld/world_sprite_manager.cpp

world_sprite_manager.obj: overworld/world_sprite_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT world_sprite_manager.obj -MD -MP -MF $(DEPDIR)/world_sprite_manager.Tpo -c -o world_sprite_manager.obj `if test -f 'overworld/world_sprite_manager.cpp'; then $(CYGPATH_W) 'overworld/world_sprite_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/world_sprite_manager.cpp'; fi`
	$(am__mv) $(DEPDIR)/world_sprite_manager.Tpo $(DEPDIR)/world_sprite_manager.Po
#	source='overworld/world_sprite_manager.cpp' object='world_sprite_manager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o world_sprite_manager.obj `if test -f 'overworld/world_sprite_manager.cpp'; then $(CYGPATH_W) 'overworld/world_sprite_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/overworld/world_sprite_manager.cpp'; fi`

player.o: player/player.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT player.o -MD -MP -MF $(DEPDIR)/player.Tpo -c -o player.o `test -f 'player/player.cpp' || echo '$(srcdir)/'`player/player.cpp
	$(am__mv) $(DEPDIR)/player.Tpo $(DEPDIR)/player.Po
#	source='player/player.cpp' object='player.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o player.o `test -f 'player/player.cpp' || echo '$(srcdir)/'`player/player.cpp

player.obj: player/player.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT player.obj -MD -MP -MF $(DEPDIR)/player.Tpo -c -o player.obj `if test -f 'player/player.cpp'; then $(CYGPATH_W) 'player/player.cpp'; else $(CYGPATH_W) '$(srcdir)/player/player.cpp'; fi`
	$(am__mv) $(DEPDIR)/player.Tpo $(DEPDIR)/player.Po
#	source='player/player.cpp' object='player.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o player.obj `if test -f 'player/player.cpp'; then $(CYGPATH_W) 'player/player.cpp'; else $(CYGPATH_W) '$(srcdir)/player/player.cpp'; fi`

preferences.o: user/preferences.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT preferences.o -MD -MP -MF $(DEPDIR)/preferences.Tpo -c -o preferences.o `test -f 'user/preferences.cpp' || echo '$(srcdir)/'`user/preferences.cpp
	$(am__mv) $(DEPDIR)/preferences.Tpo $(DEPDIR)/preferences.Po
#	source='user/preferences.cpp' object='preferences.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o preferences.o `test -f 'user/preferences.cpp' || echo '$(srcdir)/'`user/preferences.cpp

preferences.obj: user/preferences.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT preferences.obj -MD -MP -MF $(DEPDIR)/preferences.Tpo -c -o preferences.obj `if test -f 'user/preferences.cpp'; then $(CYGPATH_W) 'user/preferences.cpp'; else $(CYGPATH_W) '$(srcdir)/user/preferences.cpp'; fi`
	$(am__mv) $(DEPDIR)/preferences.Tpo $(DEPDIR)/preferences.Po
#	source='user/preferences.cpp' object='preferences.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o preferences.obj `if test -f 'user/preferences.cpp'; then $(CYGPATH_W) 'user/preferences.cpp'; else $(CYGPATH_W) '$(srcdir)/user/preferences.cpp'; fi`

savegame.o: user/savegame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT savegame.o -MD -MP -MF $(DEPDIR)/savegame.Tpo -c -o savegame.o `test -f 'user/savegame.cpp' || echo '$(srcdir)/'`user/savegame.cpp
	$(am__mv) $(DEPDIR)/savegame.Tpo $(DEPDIR)/savegame.Po
#	source='user/savegame.cpp' object='savegame.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o savegame.o `test -f 'user/savegame.cpp' || echo '$(srcdir)/'`user/savegame.cpp

savegame.obj: user/savegame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT savegame.obj -MD -MP -MF $(DEPDIR)/savegame.Tpo -c -o savegame.obj `if test -f 'user/savegame.cpp'; then $(CYGPATH_W) 'user/savegame.cpp'; else $(CYGPATH_W) '$(srcdir)/user/savegame.cpp'; fi`
	$(am__mv) $(DEPDIR)/savegame.Tpo $(DEPDIR)/savegame.Po
#	source='user/savegame.cpp' object='savegame.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o savegame.obj `if test -f 'user/savegame.cpp'; then $(CYGPATH_W) 'user/savegame.cpp'; else $(CYGPATH_W) '$(srcdir)/user/savegame.cpp'; fi`

animation.o: video/animation.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT animation.o -MD -MP -MF $(DEPDIR)/animation.Tpo -c -o animation.o `test -f 'video/animation.cpp' || echo '$(srcdir)/'`video/animation.cpp
	$(am__mv) $(DEPDIR)/animation.Tpo $(DEPDIR)/animation.Po
#	source='video/animation.cpp' object='animation.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o animation.o `test -f 'video/animation.cpp' || echo '$(srcdir)/'`video/animation.cpp

animation.obj: video/animation.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT animation.obj -MD -MP -MF $(DEPDIR)/animation.Tpo -c -o animation.obj `if test -f 'video/animation.cpp'; then $(CYGPATH_W) 'video/animation.cpp'; else $(CYGPATH_W) '$(srcdir)/video/animation.cpp'; fi`
	$(am__mv) $(DEPDIR)/animation.Tpo $(DEPDIR)/animation.Po
#	source='video/animation.cpp' object='animation.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o animation.obj `if test -f 'video/animation.cpp'; then $(CYGPATH_W) 'video/animation.cpp'; else $(CYGPATH_W) '$(srcdir)/video/animation.cpp'; fi`

font.o: video/font.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT font.o -MD -MP -MF $(DEPDIR)/font.Tpo -c -o font.o `test -f 'video/font.cpp' || echo '$(srcdir)/'`video/font.cpp
	$(am__mv) $(DEPDIR)/font.Tpo $(DEPDIR)/font.Po
#	source='video/font.cpp' object='font.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o font.o `test -f 'video/font.cpp' || echo '$(srcdir)/'`video/font.cpp

font.obj: video/font.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT font.obj -MD -MP -MF $(DEPDIR)/font.Tpo -c -o font.obj `if test -f 'video/font.cpp'; then $(CYGPATH_W) 'video/font.cpp'; else $(CYGPATH_W) '$(srcdir)/video/font.cpp'; fi`
	$(am__mv) $(DEPDIR)/font.Tpo $(DEPDIR)/font.Po
#	source='video/font.cpp' object='font.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o font.obj `if test -f 'video/font.cpp'; then $(CYGPATH_W) 'video/font.cpp'; else $(CYGPATH_W) '$(srcdir)/video/font.cpp'; fi`

gl_surface.o: video/gl_surface.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gl_surface.o -MD -MP -MF $(DEPDIR)/gl_surface.Tpo -c -o gl_surface.o `test -f 'video/gl_surface.cpp' || echo '$(srcdir)/'`video/gl_surface.cpp
	$(am__mv) $(DEPDIR)/gl_surface.Tpo $(DEPDIR)/gl_surface.Po
#	source='video/gl_surface.cpp' object='gl_surface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gl_surface.o `test -f 'video/gl_surface.cpp' || echo '$(srcdir)/'`video/gl_surface.cpp

gl_surface.obj: video/gl_surface.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gl_surface.obj -MD -MP -MF $(DEPDIR)/gl_surface.Tpo -c -o gl_surface.obj `if test -f 'video/gl_surface.cpp'; then $(CYGPATH_W) 'video/gl_surface.cpp'; else $(CYGPATH_W) '$(srcdir)/video/gl_surface.cpp'; fi`
	$(am__mv) $(DEPDIR)/gl_surface.Tpo $(DEPDIR)/gl_surface.Po
#	source='video/gl_surface.cpp' object='gl_surface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gl_surface.obj `if test -f 'video/gl_surface.cpp'; then $(CYGPATH_W) 'video/gl_surface.cpp'; else $(CYGPATH_W) '$(srcdir)/video/gl_surface.cpp'; fi`

img_manager.o: video/img_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT img_manager.o -MD -MP -MF $(DEPDIR)/img_manager.Tpo -c -o img_manager.o `test -f 'video/img_manager.cpp' || echo '$(srcdir)/'`video/img_manager.cpp
	$(am__mv) $(DEPDIR)/img_manager.Tpo $(DEPDIR)/img_manager.Po
#	source='video/img_manager.cpp' object='img_manager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o img_manager.o `test -f 'video/img_manager.cpp' || echo '$(srcdir)/'`video/img_manager.cpp

img_manager.obj: video/img_manager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT img_manager.obj -MD -MP -MF $(DEPDIR)/img_manager.Tpo -c -o img_manager.obj `if test -f 'video/img_manager.cpp'; then $(CYGPATH_W) 'video/img_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/video/img_manager.cpp'; fi`
	$(am__mv) $(DEPDIR)/img_manager.Tpo $(DEPDIR)/img_manager.Po
#	source='video/img_manager.cpp' object='img_manager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o img_manager.obj `if test -f 'video/img_manager.cpp'; then $(CYGPATH_W) 'video/img_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/video/img_manager.cpp'; fi`

img_settings.o: video/img_settings.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT img_settings.o -MD -MP -MF $(DEPDIR)/img_settings.Tpo -c -o img_settings.o `test -f 'video/img_settings.cpp' || echo '$(srcdir)/'`video/img_settings.cpp
	$(am__mv) $(DEPDIR)/img_settings.Tpo $(DEPDIR)/img_settings.Po
#	source='video/img_settings.cpp' object='img_settings.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o img_settings.o `test -f 'video/img_settings.cpp' || echo '$(srcdir)/'`video/img_settings.cpp

img_settings.obj: video/img_settings.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT img_settings.obj -MD -MP -MF $(DEPDIR)/img_settings.Tpo -c -o img_settings.obj `if test -f 'video/img_settings.cpp'; then $(CYGPATH_W) 'video/img_settings.cpp'; else $(CYGPATH_W) '$(srcdir)/video/img_settings.cpp'; fi`
	$(am__mv) $(DEPDIR)/img_settings.Tpo $(DEPDIR)/img_settings.Po
#	source='video/img_settings.cpp' object='img_settings.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o img_settings.obj `if test -f 'video/img_settings.cpp'; then $(CYGPATH_W) 'video/img_settings.cpp'; else $(CYGPATH_W) '$(srcdir)/video/img_settings.cpp'; fi`

renderer.o: video/renderer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT renderer.o -MD -MP -MF $(DEPDIR)/renderer.Tpo -c -o renderer.o `test -f 'video/renderer.cpp' || echo '$(srcdir)/'`video/renderer.cpp
	$(am__mv) $(DEPDIR)/renderer.Tpo $(DEPDIR)/renderer.Po
#	source='video/renderer.cpp' object='renderer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o renderer.o `test -f 'video/renderer.cpp' || echo '$(srcdir)/'`video/renderer.cpp

renderer.obj: video/renderer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT renderer.obj -MD -MP -MF $(DEPDIR)/renderer.Tpo -c -o renderer.obj `if test -f 'video/renderer.cpp'; then $(CYGPATH_W) 'video/renderer.cpp'; else $(CYGPATH_W) '$(srcdir)/video/renderer.cpp'; fi`
	$(am__mv) $(DEPDIR)/renderer.Tpo $(DEPDIR)/renderer.Po
#	source='video/renderer.cpp' object='renderer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o renderer.obj `if test -f 'video/renderer.cpp'; then $(CYGPATH_W) 'video/renderer.cpp'; else $(CYGPATH_W) '$(srcdir)/video/renderer.cpp'; fi`

video.o: video/video.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT video.o -MD -MP -MF $(DEPDIR)/video.Tpo -c -o video.o `test -f 'video/video.cpp' || echo '$(srcdir)/'`video/video.cpp
	$(am__mv) $(DEPDIR)/video.Tpo $(DEPDIR)/video.Po
#	source='video/video.cpp' object='video.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o video.o `test -f 'video/video.cpp' || echo '$(srcdir)/'`video/video.cpp

video.obj: video/video.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT video.obj -MD -MP -MF $(DEPDIR)/video.Tpo -c -o video.obj `if test -f 'video/video.cpp'; then $(CYGPATH_W) 'video/video.cpp'; else $(CYGPATH_W) '$(srcdir)/video/video.cpp'; fi`
	$(am__mv) $(DEPDIR)/video.Tpo $(DEPDIR)/video.Po
#	source='video/video.cpp' object='video.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o video.obj `if test -f 'video/video.cpp'; then $(CYGPATH_W) 'video/video.cpp'; else $(CYGPATH_W) '$(srcdir)/video/video.cpp'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
